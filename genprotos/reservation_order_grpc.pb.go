// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: reservation_order.proto

package genprotos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ReservationOrderServiceClient is the client API for ReservationOrderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReservationOrderServiceClient interface {
	CreateReservationOrder(ctx context.Context, in *ReservationOrder, opts ...grpc.CallOption) (*Void, error)
	DeleteReservationOrder(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Void, error)
	UpdateReservationOrder(ctx context.Context, in *ReservationOrder, opts ...grpc.CallOption) (*Void, error)
	GetByIdReservationOrder(ctx context.Context, in *ById, opts ...grpc.CallOption) (*ReservationOrder, error)
	GetAllReservationOrder(ctx context.Context, in *ReservationOrder, opts ...grpc.CallOption) (*GetAllReservationOrders, error)
}

type reservationOrderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReservationOrderServiceClient(cc grpc.ClientConnInterface) ReservationOrderServiceClient {
	return &reservationOrderServiceClient{cc}
}

func (c *reservationOrderServiceClient) CreateReservationOrder(ctx context.Context, in *ReservationOrder, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/protos.ReservationOrderService/CreateReservationOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reservationOrderServiceClient) DeleteReservationOrder(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/protos.ReservationOrderService/DeleteReservationOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reservationOrderServiceClient) UpdateReservationOrder(ctx context.Context, in *ReservationOrder, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/protos.ReservationOrderService/UpdateReservationOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reservationOrderServiceClient) GetByIdReservationOrder(ctx context.Context, in *ById, opts ...grpc.CallOption) (*ReservationOrder, error) {
	out := new(ReservationOrder)
	err := c.cc.Invoke(ctx, "/protos.ReservationOrderService/GetByIdReservationOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reservationOrderServiceClient) GetAllReservationOrder(ctx context.Context, in *ReservationOrder, opts ...grpc.CallOption) (*GetAllReservationOrders, error) {
	out := new(GetAllReservationOrders)
	err := c.cc.Invoke(ctx, "/protos.ReservationOrderService/GetAllReservationOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReservationOrderServiceServer is the server API for ReservationOrderService service.
// All implementations must embed UnimplementedReservationOrderServiceServer
// for forward compatibility
type ReservationOrderServiceServer interface {
	CreateReservationOrder(context.Context, *ReservationOrder) (*Void, error)
	DeleteReservationOrder(context.Context, *ById) (*Void, error)
	UpdateReservationOrder(context.Context, *ReservationOrder) (*Void, error)
	GetByIdReservationOrder(context.Context, *ById) (*ReservationOrder, error)
	GetAllReservationOrder(context.Context, *ReservationOrder) (*GetAllReservationOrders, error)
	mustEmbedUnimplementedReservationOrderServiceServer()
}

// UnimplementedReservationOrderServiceServer must be embedded to have forward compatible implementations.
type UnimplementedReservationOrderServiceServer struct {
}

func (UnimplementedReservationOrderServiceServer) CreateReservationOrder(context.Context, *ReservationOrder) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReservationOrder not implemented")
}
func (UnimplementedReservationOrderServiceServer) DeleteReservationOrder(context.Context, *ById) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteReservationOrder not implemented")
}
func (UnimplementedReservationOrderServiceServer) UpdateReservationOrder(context.Context, *ReservationOrder) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReservationOrder not implemented")
}
func (UnimplementedReservationOrderServiceServer) GetByIdReservationOrder(context.Context, *ById) (*ReservationOrder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByIdReservationOrder not implemented")
}
func (UnimplementedReservationOrderServiceServer) GetAllReservationOrder(context.Context, *ReservationOrder) (*GetAllReservationOrders, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllReservationOrder not implemented")
}
func (UnimplementedReservationOrderServiceServer) mustEmbedUnimplementedReservationOrderServiceServer() {
}

// UnsafeReservationOrderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReservationOrderServiceServer will
// result in compilation errors.
type UnsafeReservationOrderServiceServer interface {
	mustEmbedUnimplementedReservationOrderServiceServer()
}

func RegisterReservationOrderServiceServer(s grpc.ServiceRegistrar, srv ReservationOrderServiceServer) {
	s.RegisterService(&ReservationOrderService_ServiceDesc, srv)
}

func _ReservationOrderService_CreateReservationOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReservationOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReservationOrderServiceServer).CreateReservationOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.ReservationOrderService/CreateReservationOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReservationOrderServiceServer).CreateReservationOrder(ctx, req.(*ReservationOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReservationOrderService_DeleteReservationOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReservationOrderServiceServer).DeleteReservationOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.ReservationOrderService/DeleteReservationOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReservationOrderServiceServer).DeleteReservationOrder(ctx, req.(*ById))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReservationOrderService_UpdateReservationOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReservationOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReservationOrderServiceServer).UpdateReservationOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.ReservationOrderService/UpdateReservationOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReservationOrderServiceServer).UpdateReservationOrder(ctx, req.(*ReservationOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReservationOrderService_GetByIdReservationOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReservationOrderServiceServer).GetByIdReservationOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.ReservationOrderService/GetByIdReservationOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReservationOrderServiceServer).GetByIdReservationOrder(ctx, req.(*ById))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReservationOrderService_GetAllReservationOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReservationOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReservationOrderServiceServer).GetAllReservationOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.ReservationOrderService/GetAllReservationOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReservationOrderServiceServer).GetAllReservationOrder(ctx, req.(*ReservationOrder))
	}
	return interceptor(ctx, in, info, handler)
}

// ReservationOrderService_ServiceDesc is the grpc.ServiceDesc for ReservationOrderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReservationOrderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.ReservationOrderService",
	HandlerType: (*ReservationOrderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateReservationOrder",
			Handler:    _ReservationOrderService_CreateReservationOrder_Handler,
		},
		{
			MethodName: "DeleteReservationOrder",
			Handler:    _ReservationOrderService_DeleteReservationOrder_Handler,
		},
		{
			MethodName: "UpdateReservationOrder",
			Handler:    _ReservationOrderService_UpdateReservationOrder_Handler,
		},
		{
			MethodName: "GetByIdReservationOrder",
			Handler:    _ReservationOrderService_GetByIdReservationOrder_Handler,
		},
		{
			MethodName: "GetAllReservationOrder",
			Handler:    _ReservationOrderService_GetAllReservationOrder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "reservation_order.proto",
}
